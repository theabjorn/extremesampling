% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eps_AC_test.R
\name{epsAC.test}
\alias{epsAC.test}
\title{Score test EPS-AC}
\usage{
epsAC.test(nullmodel, xg, confounder)
}
\arguments{
\item{nullmodel}{an object of class \code{\link[stats]{formula}}, that
describes the linear regression model under the null hypothesis, see details}

\item{xg}{a matrix of variables to be tested against the null (NA for
not genotyped individuals)}

\item{confounder}{confounding (non-genetic) covariates}
}
\value{
\code{epsAC.test} returns
\item{statistic}{the score test statistic}
\item{p.value}{the P-value}
}
\description{
\code{epsAC.test} performs a score test for common genetic variants
under the EPS all-case design
}
\details{
The \code{nullmodel} \code{\link[stats]{formula}} object is of the type
y~xe, which describes a regression model, y=a+be*xe+e
assuming a normal distribution for the residuals (e). The covariate
xe is a non-genetic/environmental covariate (optional).
The variables are taken from the environment that the
function is called from.
The null hypothesis bg=0 is tested for the model y=a+be*xe+bg*xg+e.
The covariate xg is one or more, genetic markers where missing values
are coded as NA. Missing-mechanism must be MCAR or MAR.
If xg is a matrix, each variant (column) is tested against the null model.

Confounders are discrete covariates (xe) and the distribution of xg is
modelled for each level of unique value of xe.
}
\examples{
N = 5000 # Number of individuals in a population
xe1 = rnorm(n = N, mean = 2, sd = 1) # Environmental covariate
xe2 = rbinom(n = N, size = 1, prob = 0.3) # Environmental covariate
xg1 = sample(c(0,1,2),N,c(0.4,0.3,0.3), replace = TRUE) # xg
xg2 = sample(c(0,1,2),N,c(0.5,0.3,0.2), replace = TRUE) # xg
# Model parameters
a = 50; be1 = 5; be2 = 8; bg1 = 0.3; bg2 = 0.6; sigma = 2
# Generate response y
y = rnorm(N, mean = a + be1*xe1 + be2*xe2 + bg1*xg1 + bg2*xg2, sd = sigma)
# Identify extremes, here upper and lower 25\% of population
u = quantile(y,probs = 3/4,na.rm=TRUE)
l = quantile(y,probs = 1/4,na.rm=TRUE)
extreme = (y < l) | (y >= u)
# Create the EPS-full data set by setting
# the xg values of non-extremes to NA
xg1[!extreme] = NA; xg2[!extreme] = NA; xg = as.matrix(cbind(xg1,xg2))
xe = as.matrix(cbind(xe1,xe2))
# Testing
epsAC.test(y~xe1+xe2,xg = xg)$p.value
}
